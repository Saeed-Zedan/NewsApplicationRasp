'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="NewsApplicationDB")>  _
Partial Public Class NewsApplicationDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertT_BUSINESSOBJECT(instance As T_BUSINESSOBJECT)
    End Sub
  Partial Private Sub UpdateT_BUSINESSOBJECT(instance As T_BUSINESSOBJECT)
    End Sub
  Partial Private Sub DeleteT_BUSINESSOBJECT(instance As T_BUSINESSOBJECT)
    End Sub
  Partial Private Sub InsertT_FILE(instance As T_FILE)
    End Sub
  Partial Private Sub UpdateT_FILE(instance As T_FILE)
    End Sub
  Partial Private Sub DeleteT_FILE(instance As T_FILE)
    End Sub
  Partial Private Sub InsertT_NEW(instance As T_NEW)
    End Sub
  Partial Private Sub UpdateT_NEW(instance As T_NEW)
    End Sub
  Partial Private Sub DeleteT_NEW(instance As T_NEW)
    End Sub
  Partial Private Sub InsertT_PHOTO(instance As T_PHOTO)
    End Sub
  Partial Private Sub UpdateT_PHOTO(instance As T_PHOTO)
    End Sub
  Partial Private Sub DeleteT_PHOTO(instance As T_PHOTO)
    End Sub
  Partial Private Sub InsertT_USER(instance As T_USER)
    End Sub
  Partial Private Sub UpdateT_USER(instance As T_USER)
    End Sub
  Partial Private Sub DeleteT_USER(instance As T_USER)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.FileWorksObject.My.MySettings.Default.NewsApplicationDBConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property T_BUSINESSOBJECTs() As System.Data.Linq.Table(Of T_BUSINESSOBJECT)
		Get
			Return Me.GetTable(Of T_BUSINESSOBJECT)
		End Get
	End Property
	
	Public ReadOnly Property T_FILEs() As System.Data.Linq.Table(Of T_FILE)
		Get
			Return Me.GetTable(Of T_FILE)
		End Get
	End Property
	
	Public ReadOnly Property T_NEWs() As System.Data.Linq.Table(Of T_NEW)
		Get
			Return Me.GetTable(Of T_NEW)
		End Get
	End Property
	
	Public ReadOnly Property T_PHOTOs() As System.Data.Linq.Table(Of T_PHOTO)
		Get
			Return Me.GetTable(Of T_PHOTO)
		End Get
	End Property
	
	Public ReadOnly Property T_USERs() As System.Data.Linq.Table(Of T_USER)
		Get
			Return Me.GetTable(Of T_USER)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.T_BUSINESSOBJECT")>  _
Partial Public Class T_BUSINESSOBJECT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _C_CREATIONDATE As Date
	
	Private _C_NAME As String
	
	Private _C_CLASSID As Char
	
	Private _C_LASTMODIFIER As String
	
	Private _T_FILE As EntityRef(Of T_FILE)
	
	Private _T_USER As EntityRef(Of T_USER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnC_CREATIONDATEChanging(value As Date)
    End Sub
    Partial Private Sub OnC_CREATIONDATEChanged()
    End Sub
    Partial Private Sub OnC_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnC_NAMEChanged()
    End Sub
    Partial Private Sub OnC_CLASSIDChanging(value As Char)
    End Sub
    Partial Private Sub OnC_CLASSIDChanged()
    End Sub
    Partial Private Sub OnC_LASTMODIFIERChanging(value As String)
    End Sub
    Partial Private Sub OnC_LASTMODIFIERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._T_FILE = CType(Nothing, EntityRef(Of T_FILE))
		Me._T_USER = CType(Nothing, EntityRef(Of T_USER))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_CREATIONDATE", DbType:="Date NOT NULL")>  _
	Public Property C_CREATIONDATE() As Date
		Get
			Return Me._C_CREATIONDATE
		End Get
		Set
			If ((Me._C_CREATIONDATE = value)  _
						= false) Then
				Me.OnC_CREATIONDATEChanging(value)
				Me.SendPropertyChanging
				Me._C_CREATIONDATE = value
				Me.SendPropertyChanged("C_CREATIONDATE")
				Me.OnC_CREATIONDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_NAME", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property C_NAME() As String
		Get
			Return Me._C_NAME
		End Get
		Set
			If (String.Equals(Me._C_NAME, value) = false) Then
				Me.OnC_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._C_NAME = value
				Me.SendPropertyChanged("C_NAME")
				Me.OnC_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_CLASSID", DbType:="Char(1) NOT NULL")>  _
	Public Property C_CLASSID() As Char
		Get
			Return Me._C_CLASSID
		End Get
		Set
			If ((Me._C_CLASSID = value)  _
						= false) Then
				Me.OnC_CLASSIDChanging(value)
				Me.SendPropertyChanging
				Me._C_CLASSID = value
				Me.SendPropertyChanged("C_CLASSID")
				Me.OnC_CLASSIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_LASTMODIFIER", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property C_LASTMODIFIER() As String
		Get
			Return Me._C_LASTMODIFIER
		End Get
		Set
			If (String.Equals(Me._C_LASTMODIFIER, value) = false) Then
				Me.OnC_LASTMODIFIERChanging(value)
				Me.SendPropertyChanging
				Me._C_LASTMODIFIER = value
				Me.SendPropertyChanged("C_LASTMODIFIER")
				Me.OnC_LASTMODIFIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="T_BUSINESSOBJECT_T_FILE", Storage:="_T_FILE", ThisKey:="ID", OtherKey:="ID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property T_FILE() As T_FILE
		Get
			Return Me._T_FILE.Entity
		End Get
		Set
			Dim previousValue As T_FILE = Me._T_FILE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._T_FILE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._T_FILE.Entity = Nothing
					previousValue.T_BUSINESSOBJECT = Nothing
				End If
				Me._T_FILE.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.T_BUSINESSOBJECT = Me
				End If
				Me.SendPropertyChanged("T_FILE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="T_BUSINESSOBJECT_T_USER", Storage:="_T_USER", ThisKey:="ID", OtherKey:="ID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property T_USER() As T_USER
		Get
			Return Me._T_USER.Entity
		End Get
		Set
			Dim previousValue As T_USER = Me._T_USER.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._T_USER.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._T_USER.Entity = Nothing
					previousValue.T_BUSINESSOBJECT = Nothing
				End If
				Me._T_USER.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.T_BUSINESSOBJECT = Me
				End If
				Me.SendPropertyChanged("T_USER")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.T_FILE")>  _
Partial Public Class T_FILE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _C_BODY As String
	
	Private _C_TAGGED As Char
	
	Private _C_Description As System.Data.Linq.Binary
	
	Private _T_NEW As EntityRef(Of T_NEW)
	
	Private _T_PHOTO As EntityRef(Of T_PHOTO)
	
	Private _T_BUSINESSOBJECT As EntityRef(Of T_BUSINESSOBJECT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnC_BODYChanging(value As String)
    End Sub
    Partial Private Sub OnC_BODYChanged()
    End Sub
    Partial Private Sub OnC_TAGGEDChanging(value As Char)
    End Sub
    Partial Private Sub OnC_TAGGEDChanged()
    End Sub
    Partial Private Sub OnC_DescriptionChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnC_DescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._T_NEW = CType(Nothing, EntityRef(Of T_NEW))
		Me._T_PHOTO = CType(Nothing, EntityRef(Of T_PHOTO))
		Me._T_BUSINESSOBJECT = CType(Nothing, EntityRef(Of T_BUSINESSOBJECT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				If Me._T_BUSINESSOBJECT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_BODY", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property C_BODY() As String
		Get
			Return Me._C_BODY
		End Get
		Set
			If (String.Equals(Me._C_BODY, value) = false) Then
				Me.OnC_BODYChanging(value)
				Me.SendPropertyChanging
				Me._C_BODY = value
				Me.SendPropertyChanged("C_BODY")
				Me.OnC_BODYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_TAGGED", DbType:="Char(1) NOT NULL")>  _
	Public Property C_TAGGED() As Char
		Get
			Return Me._C_TAGGED
		End Get
		Set
			If ((Me._C_TAGGED = value)  _
						= false) Then
				Me.OnC_TAGGEDChanging(value)
				Me.SendPropertyChanging
				Me._C_TAGGED = value
				Me.SendPropertyChanged("C_TAGGED")
				Me.OnC_TAGGEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_Description", DbType:="VarBinary(255)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property C_Description() As System.Data.Linq.Binary
		Get
			Return Me._C_Description
		End Get
		Set
			If (Object.Equals(Me._C_Description, value) = false) Then
				Me.OnC_DescriptionChanging(value)
				Me.SendPropertyChanging
				Me._C_Description = value
				Me.SendPropertyChanged("C_Description")
				Me.OnC_DescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="T_FILE_T_NEW", Storage:="_T_NEW", ThisKey:="ID", OtherKey:="ID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property T_NEW() As T_NEW
		Get
			Return Me._T_NEW.Entity
		End Get
		Set
			Dim previousValue As T_NEW = Me._T_NEW.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._T_NEW.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._T_NEW.Entity = Nothing
					previousValue.T_FILE = Nothing
				End If
				Me._T_NEW.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.T_FILE = Me
				End If
				Me.SendPropertyChanged("T_NEW")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="T_FILE_T_PHOTO", Storage:="_T_PHOTO", ThisKey:="ID", OtherKey:="ID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property T_PHOTO() As T_PHOTO
		Get
			Return Me._T_PHOTO.Entity
		End Get
		Set
			Dim previousValue As T_PHOTO = Me._T_PHOTO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._T_PHOTO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._T_PHOTO.Entity = Nothing
					previousValue.T_FILE = Nothing
				End If
				Me._T_PHOTO.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.T_FILE = Me
				End If
				Me.SendPropertyChanged("T_PHOTO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="T_BUSINESSOBJECT_T_FILE", Storage:="_T_BUSINESSOBJECT", ThisKey:="ID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property T_BUSINESSOBJECT() As T_BUSINESSOBJECT
		Get
			Return Me._T_BUSINESSOBJECT.Entity
		End Get
		Set
			Dim previousValue As T_BUSINESSOBJECT = Me._T_BUSINESSOBJECT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._T_BUSINESSOBJECT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._T_BUSINESSOBJECT.Entity = Nothing
					previousValue.T_FILE = Nothing
				End If
				Me._T_BUSINESSOBJECT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.T_FILE = Me
					Me._ID = value.ID
				Else
					Me._ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("T_BUSINESSOBJECT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.T_NEWS")>  _
Partial Public Class T_NEW
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _C_CATEGORY As String
	
	Private _T_FILE As EntityRef(Of T_FILE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnC_CATEGORYChanging(value As String)
    End Sub
    Partial Private Sub OnC_CATEGORYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._T_FILE = CType(Nothing, EntityRef(Of T_FILE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				If Me._T_FILE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_CATEGORY", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property C_CATEGORY() As String
		Get
			Return Me._C_CATEGORY
		End Get
		Set
			If (String.Equals(Me._C_CATEGORY, value) = false) Then
				Me.OnC_CATEGORYChanging(value)
				Me.SendPropertyChanging
				Me._C_CATEGORY = value
				Me.SendPropertyChanged("C_CATEGORY")
				Me.OnC_CATEGORYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="T_FILE_T_NEW", Storage:="_T_FILE", ThisKey:="ID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property T_FILE() As T_FILE
		Get
			Return Me._T_FILE.Entity
		End Get
		Set
			Dim previousValue As T_FILE = Me._T_FILE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._T_FILE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._T_FILE.Entity = Nothing
					previousValue.T_NEW = Nothing
				End If
				Me._T_FILE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.T_NEW = Me
					Me._ID = value.ID
				Else
					Me._ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("T_FILE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.T_PHOTO")>  _
Partial Public Class T_PHOTO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _C_LOCATION As String
	
	Private _T_FILE As EntityRef(Of T_FILE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnC_LOCATIONChanging(value As String)
    End Sub
    Partial Private Sub OnC_LOCATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._T_FILE = CType(Nothing, EntityRef(Of T_FILE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				If Me._T_FILE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_LOCATION", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property C_LOCATION() As String
		Get
			Return Me._C_LOCATION
		End Get
		Set
			If (String.Equals(Me._C_LOCATION, value) = false) Then
				Me.OnC_LOCATIONChanging(value)
				Me.SendPropertyChanging
				Me._C_LOCATION = value
				Me.SendPropertyChanged("C_LOCATION")
				Me.OnC_LOCATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="T_FILE_T_PHOTO", Storage:="_T_FILE", ThisKey:="ID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property T_FILE() As T_FILE
		Get
			Return Me._T_FILE.Entity
		End Get
		Set
			Dim previousValue As T_FILE = Me._T_FILE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._T_FILE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._T_FILE.Entity = Nothing
					previousValue.T_PHOTO = Nothing
				End If
				Me._T_FILE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.T_PHOTO = Me
					Me._ID = value.ID
				Else
					Me._ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("T_FILE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.T_USER")>  _
Partial Public Class T_USER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _C_FULLNAME As String
	
	Private _C_PASSWORD As String
	
	Private _C_PRIVILEGELEVEL As Boolean
	
	Private _T_BUSINESSOBJECT As EntityRef(Of T_BUSINESSOBJECT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnC_FULLNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnC_FULLNAMEChanged()
    End Sub
    Partial Private Sub OnC_PASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnC_PASSWORDChanged()
    End Sub
    Partial Private Sub OnC_PRIVILEGELEVELChanging(value As Boolean)
    End Sub
    Partial Private Sub OnC_PRIVILEGELEVELChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._T_BUSINESSOBJECT = CType(Nothing, EntityRef(Of T_BUSINESSOBJECT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				If Me._T_BUSINESSOBJECT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_FULLNAME", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property C_FULLNAME() As String
		Get
			Return Me._C_FULLNAME
		End Get
		Set
			If (String.Equals(Me._C_FULLNAME, value) = false) Then
				Me.OnC_FULLNAMEChanging(value)
				Me.SendPropertyChanging
				Me._C_FULLNAME = value
				Me.SendPropertyChanged("C_FULLNAME")
				Me.OnC_FULLNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_PASSWORD", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property C_PASSWORD() As String
		Get
			Return Me._C_PASSWORD
		End Get
		Set
			If (String.Equals(Me._C_PASSWORD, value) = false) Then
				Me.OnC_PASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._C_PASSWORD = value
				Me.SendPropertyChanged("C_PASSWORD")
				Me.OnC_PASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_C_PRIVILEGELEVEL", DbType:="Bit NOT NULL")>  _
	Public Property C_PRIVILEGELEVEL() As Boolean
		Get
			Return Me._C_PRIVILEGELEVEL
		End Get
		Set
			If ((Me._C_PRIVILEGELEVEL = value)  _
						= false) Then
				Me.OnC_PRIVILEGELEVELChanging(value)
				Me.SendPropertyChanging
				Me._C_PRIVILEGELEVEL = value
				Me.SendPropertyChanged("C_PRIVILEGELEVEL")
				Me.OnC_PRIVILEGELEVELChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="T_BUSINESSOBJECT_T_USER", Storage:="_T_BUSINESSOBJECT", ThisKey:="ID", OtherKey:="ID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property T_BUSINESSOBJECT() As T_BUSINESSOBJECT
		Get
			Return Me._T_BUSINESSOBJECT.Entity
		End Get
		Set
			Dim previousValue As T_BUSINESSOBJECT = Me._T_BUSINESSOBJECT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._T_BUSINESSOBJECT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._T_BUSINESSOBJECT.Entity = Nothing
					previousValue.T_USER = Nothing
				End If
				Me._T_BUSINESSOBJECT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.T_USER = Me
					Me._ID = value.ID
				Else
					Me._ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("T_BUSINESSOBJECT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
